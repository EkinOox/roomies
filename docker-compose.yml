services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - frontend-backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - mysql
    networks:
      - frontend-backend
      - backend-db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./bdd/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    ports:
      - "3306:3306"
    networks:
      - backend-db
    deploy:
      placement:
        constraints:
          - node.role == manager
    
  realtime-server:
    image: realtime-server
    build:
      context: ./realtime-server
    ports:
      - "3000:3000"
    volumes:
      - ./realtime-server:/app
    working_dir: /app
    networks:
      - frontend-backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - backend-db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  
  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    ports:
      - "3001:3001"
    volumes:
      - uptime_kuma_data:/app/data
    networks:
      - frontend-backend
    restart: unless-stopped

volumes:
  mysql_data:
  frontend_node_modules:
  uptime_kuma_data:

networks:
  frontend-backend:
    driver: bridge
  backend-db:
    driver: bridge
